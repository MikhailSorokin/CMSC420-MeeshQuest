package cmsc420.pmquadtree;

import java.awt.geom.Point2D;
import java.awt.geom.Point2D.Float;
import java.awt.geom.Rectangle2D;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.TreeSet;

import cmsc420.command.Command;
import cmsc420.geom.Inclusive2DIntersectionVerifier;
import cmsc420.geometry.Airport;
import cmsc420.geometry.City;
import cmsc420.geometry.Geometry;
import cmsc420.geometry.Road;
import cmsc420.geometry.RoadNameComparator;
import cmsc420.geometry.Terminal;

public abstract class PMQuadtree {

	/** stores all mapped roads in the PM Quadtree */
	final protected TreeSet<Road> allRoads;
	
	/** stores how many roads are connected to each city */
	final protected HashMap<String, Integer> numRoadsForCity;
	
	final protected HashSet<City> allMappedTerminalCities;
	
	/** number of isolated cities */
	protected int numIsolatedCities;
	
	/** number of airports */
	protected int numAirports;
	
	/** number of terminals */
	protected int numTerminals;
	
	/** root of the PM Quadtree */
	protected Node root;

	/** spatial width of the PM Quadtree */
	final protected int spatialWidth;

	/** spatial height of the PM Quadtree */
	final protected int spatialHeight;

	/** spatial origin of the PM Quadtree (i.e. (0,0)) */
	final protected Point2D.Float spatialOrigin;

	/** validator for the PM Quadtree */
	final protected Validator validator;

	/** singleton white node */
	final protected White white = new White();

	/** order of the PM Quadtree (one of: {1,2,3}) */
	final protected int order;
	
	protected boolean needToThrowPMRuleException = false;

	public abstract class Node {
		/** Type flag for an empty PM Quadtree leaf node */
		public static final int WHITE = 0;

		/** Type flag for a non-empty PM Quadtree leaf node */
		public static final int BLACK = 1;

		/** Type flag for a PM Quadtree internal node */
		public static final int GRAY = 2;

		/** type of PR Quadtree node (either empty, leaf, or internal) */
		protected final int type;

		/**
		 * Constructor for abstract Node class.
		 * 
		 * @param type
		 *            type of the node (either empty, leaf, or internal)
		 */
		protected Node(final int type) {
			this.type = type;
		}

		/**
		 * Gets the type of this PM Quadtree node. One of: BLACK, WHITE, GRAY.
		 * 
		 * @return type of this PM Quadtree node
		 */
		public int getType() {
			return type;
		}

		/**
		 * Adds a road to this PM Quadtree node.
		 * 
		 * @param g
		 *            road to be added
		 * @param origin
		 *            origin of the rectangular bounds of this node
		 * @param width
		 *            width of the rectangular bounds of this node
		 * @param height
		 *            height of the rectangular bounds of this node
		 * @return this node after the city has been added
		 * @throws PMRuleViolationThrowable 
		 * @throws InvalidPartitionThrowable
		 *             if the map if partitioned too deeply
		 * @throws IntersectingRoadsThrowable
		 *             if this road intersects with another road
		 */
		public Node add(final Geometry g, final Point2D.Float origin,
				final int width, final int height) throws PMRuleViolationThrowable {
			throw new UnsupportedOperationException();
		}
		
		public Node remove(Geometry g, Float float1, int halfWidth, int halfHeight) {
			throw new UnsupportedOperationException();
		}

		/**
		 * Returns if this node follows the rules of the PM Quadtree.
		 * 
		 * @return <code>true</code> if the node follows the rules of the PM
		 *         Quadtree; <code>false</code> otherwise
		 */
		public boolean isValid() {
			throw new UnsupportedOperationException();
		}

	}

	/**
	 * White class represents an empty PM Quadtree leaf node.
	 */
	public class White extends Node {
		/**
		 * Constructs and initializes an empty PM Quadtree leaf node.
		 */
		public White() {
			super(WHITE);
		}

		/**
		 * Adds a road to this PM Quadtree node.
		 * 
		 * @param g
		 *            road to be added
		 * @param origin
		 *            origin of the rectangular bounds of this node
		 * @param width
		 *            width of the rectangular bounds of this node
		 * @param height
		 *            height of the rectangular bounds of this node
		 * @return this node after the city has been added
		 * @throws PMRuleViolationThrowable 
		 * @throws InvalidPartitionThrowable
		 *             if the map if partitioned too deeply
		 * @throws IntersectingRoadsThrowable
		 *             if this road intersects with another road
		 */
		public Node add(final Geometry g, final Point2D.Float origin,
				final int width, final int height) throws PMRuleViolationThrowable {
			final Black blackNode = new Black();
			return blackNode.add(g, origin, width, height);
		}
		
		public Node remove(final Geometry g, final Point2D.Float origin,
				final int width, final int height) {
			throw new UnsupportedOperationException();
		}

		/**
		 * Returns if this node follows the rules of the PM Quadtree.
		 * 
		 * @return <code>true</code> if the node follows the rules of the PM
		 *         Quadtree; <code>false</code> otherwise
		 */
		public boolean isValid() {
			return true;
		}

		public String toString() {
			return "white";
		}
	}

	/**
	 * Black class represents a non-empty PM Quadtree leaf node. Black nodes are
	 * capable of storing both cities (points) and roads (line segments).
	 * <p>
	 * Each black node stores cities and roads into its own sorted geometry
	 * list.
	 * <p>
	 * Black nodes are split into a gray node if they do not satisfy the rules
	 * of the PM Quadtree.
	 */
	public class Black extends Node {

		/** list of cities and roads contained within black node */
		final protected LinkedList<Geometry> geometry;

		/** number of airpoints contained within this black node */
		protected int numPoints;

		/**
		 * Constructs and initializes a non-empty PM Quadtree leaf node.
		 */
		public Black() {
			super(BLACK);
			geometry = new LinkedList<Geometry>();
			numPoints = 0;
		}

		/**
		 * Gets a linked list of the cities and roads contained by this black
		 * node.
		 * 
		 * @return list of cities and roads contained within this black node
		 */
		public LinkedList<Geometry> getGeometry() {
			return geometry;
		}

		/**
		 * Gets the index of the road in this black node's geometry list.
		 * 
		 * @param g
		 *            road to be searched for in the sorted geometry list
		 * @return index of the search key, if it is contained in the list;
		 *         otherwise, (-(insertion point) - 1)
		 */
		private int getIndex(final Geometry g) {
			return Collections.binarySearch(geometry, g);
		}

		/**
		 * Adds a road to this black node. After insertion, if the node becomes
		 * invalid, it will be split into a Gray node.
		 * @throws PMRuleViolationThrowable 
		 */
		public Node add(final Geometry g, final Point2D.Float origin,
				final int width, final int height) throws PMRuleViolationThrowable {
			
			if (g.isRoad()) {
				// g is a road
				Road r = (Road)g;
				/* create region rectangle */
				final Rectangle2D.Float rect = new Rectangle2D.Float(origin.x,
						origin.y, width, height);
				
				/* check if start point intersects with region */
				if (r.getStartTerminal() != null) {
					if (Inclusive2DIntersectionVerifier.intersects(r.getStartTerminal().localPoint2D(), rect)) {
						addGeometryToList(r.getStartTerminal());
					}
				} else {
					if (Inclusive2DIntersectionVerifier.intersects(r.getStart().toPoint2D(), rect)) {
						addGeometryToList(r.getStart());
					}
				}
				
				/* check if end point intersects with region */
				if (r.getEndTerminal() != null) {
					if (Inclusive2DIntersectionVerifier.intersects(r.getEndTerminal().localPoint2D(), rect)) {
						addGeometryToList(r.getEndTerminal());
					}
				} else {
					if (Inclusive2DIntersectionVerifier.intersects(r.getEnd().toPoint2D(), rect)) {
						addGeometryToList(r.getEnd());
					}
				}
					
			}

			/* add the road or airport to the geometry list */
			addGeometryToList(g);
			
			/* check if this node is valid */
			if (isValid()) {
				/* valid so return this black node */
				return this;
			} else {
				/* invalid so partition into a Gray node */
				return partition(origin, width, height);
			}
		}
		
		private boolean removeGeometryToList(final Geometry g) {
			/* search for the non-existent item */
			final int index = getIndex(g);

			if (index < 0) return false;
			
			geometry.remove(index);

			if (g.isCity() || g.isAirport() || g.isTerminal()) {
					// g is an ISO city or airport
				numPoints--;
			}
			
			return true;
		}
		
		public Node remove(final Geometry g, final Point2D.Float origin,
				final int width, final int height) {
			removeGeometryToList(g);
			if (geometry.isEmpty()) return white;
			else return this;
		}

		/**
		 * Adds a road to this node's geometry list.
		 * 
		 * @param g
		 *            road to be added
		 */
		private boolean addGeometryToList(final Geometry g) {
			/* search for the non-existent item */
			final int index = getIndex(g);

			/* add the non-existent item to the list */
			if (index < 0) {
				geometry.add(-index - 1, g);

				if (g.isCity() || g.isAirport() || g.isTerminal()) {
					// g is an ISO city or airport
					numPoints++;
				}
				return true;
			}
			return false;
		}

		/**
		 * Returns if this node follows the rules of the PM Quadtree.
		 * 
		 * @return <code>true</code> if the node follows the rules of the PM
		 *         Quadtree; <code>false</code> otherwise
		 */
		public boolean isValid() {
			return validator.valid(this);
		}

		/**
		 * Gets the number of cities contained in this black node.
		 * 
		 * @return number of cities contained in this black node
		 */
		public int getNumPoints() {
			return numPoints;
		}

		/**
		 * Partitions an invalid back node into a gray node and adds this black
		 * node's roads to the new gray node.
		 * 
		 * @param origin
		 *            origin of the rectangular bounds of this node
		 * @param width
		 *            width of the rectangular bounds of this node
		 * @param height
		 *            height of the rectangular bounds of this node
		 * @return the new gray node
		 * @throws PMRuleViolationThrowable 
		 * @throws InvalidPartitionThrowable
		 *             if the quadtree was partitioned too deeply
		 * @throws IntersectingRoadsThrowable
		 *             if two roads intersect
		 */
		private Node partition(final Point2D.Float origin, final int width, final int height) throws PMRuleViolationThrowable {
			//][			

			/* create new gray node */
			Node gray = new Gray(origin, width, height);

			// add airports/terminals only; endpoints of roads are added in recursive calls
			// to black.add()
			for (int i = 0; i < numPoints; i++) {
				final Geometry g = geometry.get(i);
				if (g.isAirport()) {
					gray = gray.add(g, origin, width, height);
				}
			}			
			// add roads
			for (int i = numPoints; i < geometry.size(); i++) {
				final Geometry g = geometry.get(i);
				gray = gray.add(g, origin, width, height);
			}
			return gray;
		}

		/**
		 * Returns a string representing this black node and its road list.
		 * 
		 * @return a string representing this black node and its road list
		 */
		public String toString() {
			return "black: " + geometry.toString();
		}

		/**
		 * Returns if this black node contains a city.
		 * 
		 * @return if this black node contains a city
		 */
		public boolean containsCity() {
			return (numPoints > 0);
		}

		/**
		 * @return true if this black node contains at least a road
		 */
		public boolean containsRoad() {
			return (geometry.size() - numPoints) > 0;
		}

		/**
		 * If this black node contains a city, returns the city contained within
		 * this black node. Else returns <code>null</code>.
		 * 
		 * @return the city if it exists, else <code>null</code>
		 */
		public City getCity() {
			final Geometry g = geometry.getFirst();
			return g.isCity() ? (City)g : null;
		}		
	}

	/**
	 * Gray class represents an internal PM Quadtree node.
	 */
	public class Gray extends Node {
		/** this gray node's 4 child nodes */
		final protected Node[] children;

		/** regions representing this gray node's 4 child nodes */
		final protected Rectangle2D.Float[] regions;

		/** origin of the rectangular bounds of this node */
		final protected Point2D.Float origin;

		/** the origin of rectangular bounds of each of the node's child nodes */
		final protected Point2D.Float[] origins;

		/** half the width of the rectangular bounds of this node */
		final protected int halfWidth;

		/** half the height of the rectangular bounds of this node */
		final protected int halfHeight;

		/**
		 * Constructs and initializes an internal PM Quadtree node.
		 * 
		 * @param origin
		 *            origin of the rectangular bounds of this node
		 * @param width
		 *            width of the rectangular bounds of this node
		 * @param height
		 *            height of the rectangular bounds of this node
		 */
		public Gray(final Point2D.Float origin, final int width,
				final int height) {
			super(GRAY);

			/* set this node's origin */
			this.origin = origin;

			/* initialize the children as white nodes */
			children = new Node[4];
			for (int i = 0; i < 4; i++) {
				children[i] = white;
			}

			/* get half the width and half the height */
			halfWidth = width >> 1;
			halfHeight = height >> 1;

			/* initialize the child origins */
			origins = new Point2D.Float[4];
			origins[0] = new Point2D.Float(origin.x, origin.y + halfHeight);
			origins[1] = new Point2D.Float(origin.x + halfWidth, origin.y
					+ halfHeight);
			origins[2] = new Point2D.Float(origin.x, origin.y);
			origins[3] = new Point2D.Float(origin.x + halfWidth, origin.y);

			/* initialize the child regions */
			regions = new Rectangle2D.Float[4];
			for (int i = 0; i < 4; i++) {
				regions[i] = new Rectangle2D.Float(origins[i].x, origins[i].y,
						halfWidth, halfHeight);
			}
		}

		/**
		 * Adds a road to this PM Quadtree node.
		 * 
		 * @param g
		 *            road to be added
		 * @param origin
		 *            origin of the rectangular bounds of this node
		 * @param width
		 *            width of the rectangular bounds of this node
		 * @param height
		 *            height of the rectangular bounds of this node
		 * @return this node after the city has been added
		 * @throws PMRuleViolationThrowable 
		 * @throws InvalidPartitionThrowable
		 *             if the map if partitioned too deeply
		 * @throws IntersectingRoadsThrowable
		 *             if this road intersects with another road
		 */
		
		public Node add(final Geometry g, final Point2D.Float origin,
				final int width, final int height) throws PMRuleViolationThrowable  {
			
			if (halfWidth < 1 || halfHeight < 1) {
				needToThrowPMRuleException = true;
				/*return this;
				throw new PMRuleViolationThrowable();*/
			}
			
			for (int i = 0; i < 4; i++) {
				//FIXED: Need support for airport and terminal stuff
				if (g.isRoad() && Inclusive2DIntersectionVerifier.intersects(
						((Road)g).toLine2D(),regions[i]) 
						|| g.isCity() && Inclusive2DIntersectionVerifier.intersects(
								((City)g).toPoint2D(),regions[i])
						|| g.isTerminal() && Inclusive2DIntersectionVerifier.intersects(
								((Terminal)g).localPoint2D(),regions[i]) 
								|| g.isAirport() && Inclusive2DIntersectionVerifier.intersects(
										((Airport)g).localPoint2D(),regions[i])) {
					children[i] = children[i].add(g, origins[i], halfWidth,
							halfHeight);
				}
			}
			return this;
		}
		
		public Node remove(final Geometry g, final Point2D.Float origin,
				final int width, final int height) {
			
			int numWhite = 0;
			int numBlack = 0;
			int numGray = 0;
			Black blackNode = null;
			
			for (int i = 0; i < 4; i++) {
				if (g.isRoad() && Inclusive2DIntersectionVerifier.intersects(
						((Road)g).toLine2D(),regions[i]) 
						|| g.isCity() && Inclusive2DIntersectionVerifier.intersects(
								((City)g).toPoint2D(),regions[i])
						|| g.isTerminal() && Inclusive2DIntersectionVerifier.intersects(
								((Terminal)g).localPoint2D(),regions[i]) 
								|| g.isAirport() && Inclusive2DIntersectionVerifier.intersects(
										((Airport)g).localPoint2D(),regions[i])) {
					/*if ((g.isRoad()) && ((Road)g).getEndTerminal() != null)
						System.out.println("Terminal: " + ((Road)g).getEndTerminal().getTerminalName() + " at " + i);*/
					children[i] = children[i].remove(g, origins[i], halfWidth,
							halfHeight);
				}
				
			}
			
			for (int i = 0; i < 4; i++) {
				if (children[i] == white) numWhite++;
				else if (children[i].type == Node.BLACK) {
					numBlack++;
					blackNode = (Black)children[i];
				} else if (children[i].type == Node.GRAY) {
					numGray++;
				}
			}

			if (numWhite == 4) { 
				return white;
			}
			else if (numWhite == 3 && numBlack == 1) {
				return blackNode; 
			}
			else if (numGray == 0) {
				Black newBlack = new Black();
				//Add all geometry in this subtree into b
				for (int i = 0; i < 4; i++) {
					if (children[i].type == Node.BLACK) {
						for (Geometry blackGeometry : ((Black)children[i]).geometry) {
							newBlack.addGeometryToList(blackGeometry);
						}
					}
				}
				if (newBlack.isValid()) return newBlack;
				else return this; //gray necessary, so keep in tree.
			} else { 
				return this;
			}
		}

		/**
		 * Returns if this node follows the rules of the PM Quadtree.
		 * 
		 * @return <code>true</code> if the node follows the rules of the PM
		 *         Quadtree; <code>false</code> otherwise
		 */
		public boolean isValid() {
			return children[0].isValid() && children[1].isValid()
					&& children[2].isValid() && children[3].isValid();
		}

		public String toString() {
			StringBuilder grayStringBuilder = new StringBuilder("gray:");
			for (Node child : children) {
				grayStringBuilder.append("\n\t");
				grayStringBuilder.append(child.toString());
			}
			return grayStringBuilder.toString();
		}

		/**
		 * Gets the child node of this node according to which quadrant it falls
		 * in.
		 * 
		 * @param quadrant
		 *            quadrant number (top left is 0, top right is 1, bottom
		 *            left is 2, bottom right is 3)
		 * @return child node
		 */
		public Node getChild(final int quadrant) {
			if (quadrant < 0 || quadrant > 3) {
				throw new IllegalArgumentException();
			} else {
				return children[quadrant];
			}
		}

		/**
		 * Gets the rectangular region for the specified child node of this
		 * internal node.
		 * 
		 * @param quadrant
		 *            quadrant that child lies within
		 * @return rectangular region for this child node
		 */
		public Rectangle2D.Float getChildRegion(int quadrant) {
			if (quadrant < 0 || quadrant > 3) {
				throw new IllegalArgumentException();
			} else {
				return regions[quadrant];
			}
		}

		/**
		 * Gets the center X coordinate of this node's rectangular bounds.
		 * 
		 * @return center X coordinate of this node's rectangular bounds
		 */
		public int getCenterX() {
			return (int) origin.x + halfWidth;
		}

		/**
		 * Gets the center Y coordinate of this node's rectangular bounds.
		 * 
		 * @return center Y coordinate of this node's rectangular bounds
		 */
		public int getCenterY() {
			return (int) origin.y + halfHeight;
		}

		/**
		 * Gets half the width of this internal node.
		 * 
		 * @return half the width of this internal node
		 */
		public int getHalfWidth() {
			return halfWidth;
		}

		/**
		 * Gets half the height of this internal node.
		 * 
		 * @return half the height of this internal node
		 */
		public int getHalfHeight() {
			return halfHeight;
		}
	}

	public PMQuadtree(final Validator validator, final int spatialWidth,
			final int spatialHeight, final int order) {
		if (order != 1 && order != 3) {
			throw new IllegalArgumentException("order must be one of: {1,3}");
		}

		root = white;
		this.validator = validator;
		this.spatialWidth = spatialWidth;
		this.spatialHeight = spatialHeight;
		spatialOrigin = new Point2D.Float(0.0f, 0.0f);
		allRoads = new TreeSet<Road>(new RoadNameComparator());
		numRoadsForCity = new HashMap<String, Integer>();
		allMappedTerminalCities = new HashSet<City>();
		this.order = order;
	}

	public Node getRoot() {
		return root;
	}
	
	public void setRoot(Node newRoot) {
		root = newRoot;
	}
	
	public void addRoad(final Road g) 
			throws RoadAlreadyExistsThrowable, OutOfBoundsThrowable, 
			PMRuleViolationThrowable, RoadIntersectingThrowable {


		Rectangle2D.Float world = new Rectangle2D.Float(spatialOrigin.x, spatialOrigin.y, 
				spatialWidth, spatialHeight);
		if (!Inclusive2DIntersectionVerifier.intersects(g.toLine2D(), world)) {
			throw new OutOfBoundsThrowable();
		}
		
		final Road g2 = new Road(g.getEnd(), g.getStart());

		if (allRoads.contains(g) || allRoads.contains(g2)) {
			throw new RoadAlreadyExistsThrowable();
		}
		
		for (Road r : allRoads) {
			if (Inclusive2DIntersectionVerifier.intersects(g.toLine2D(), r.toLine2D())) {
				int numOfAllowedIntersections = 0;
				
				if (r.getStart() != null && r.getStart().equals(g.getStart())) numOfAllowedIntersections++;
				if (r.getStart() != null && r.getStart().equals(g.getEnd())) numOfAllowedIntersections++;
				if (r.getEnd() != null && r.getEnd().equals(g.getStart())) numOfAllowedIntersections++;
				if (r.getEnd() != null && r.getEnd().equals(g.getEnd())) numOfAllowedIntersections++;
				if (r.getStartTerminal() != null && r.getStartTerminal().getTerminalName().equals(g.getStart().getName())) numOfAllowedIntersections++;
				if (r.getStartTerminal() != null && r.getStartTerminal().getTerminalName().equals(g.getEnd().getName())) numOfAllowedIntersections++;
				if (r.getEndTerminal() != null && r.getEndTerminal().getTerminalName().equals(g.getStart().getName())) numOfAllowedIntersections++;
				if (r.getEndTerminal() != null && r.getEndTerminal().getTerminalName().equals(g.getEnd().getName())) numOfAllowedIntersections++;
				
				if (numOfAllowedIntersections != 1) throw new RoadIntersectingThrowable();
			}
			//Else, safe for this iteration. Check next one to see if need to throw an error
		}
		
		//If road intersects with airport, discount it
		/*if (Inclusive2DIntersectionVerifier.intersects(airport.localPoint2D(), 
				terminal.toLine2D())) {
			throw new PMRuleViolationThrowable();
		}*/
		
		needToThrowPMRuleException = false;
		root = root.add(g, spatialOrigin, spatialWidth, spatialHeight);
		
		if (needToThrowPMRuleException) {
			throw new PMRuleViolationThrowable();
		}
		
		allRoads.add(g);
		if (Inclusive2DIntersectionVerifier.intersects(g.getStart().toPoint2D(), world)) {
			increaseNumRoadsMap(g.getStart().getName());
		}
		if (Inclusive2DIntersectionVerifier.intersects(g.getEnd().toPoint2D(), world)) {
			increaseNumRoadsMap(g.getEnd().getName());
		}

	}
	
	public void addAirport(final Airport airport, final Terminal terminal, boolean duplicateName,
			boolean duplicateCoordinate, City terminalConnectingCity) 
			throws OutOfBoundsThrowable, PMRuleViolationThrowable, DuplicateNameThrowable, 
			DuplicateCoordinateThrowable, AddOutOfBoundsThrowable, CityDoesNotExistThrowable, 
			NotSameMetropoleThrowable {

		if (!Inclusive2DIntersectionVerifier.intersects(airport.localPoint2D(), 
				new Rectangle2D.Float(spatialOrigin.x, spatialOrigin.y, 
						spatialWidth, spatialHeight))) {
			throw new OutOfBoundsThrowable();
		}
		
		/*if (!Inclusive2DIntersectionVerifier.intersects(airport.remotePoint2D(), 
				new Rectangle2D.Float(spatialOrigin.x, spatialOrigin.y, 
						spatialWidth, spatialHeight))) {
			throw new OutOfBoundsThrowable();
		}*/
		
		if (terminal.remotePoint2D().getX() < 0 || terminal.remotePoint2D().getY() < 0
				|| terminal.remotePoint2D().getX() >= remoteSpatialWidth || terminal.remotePoint2D().getY() >= Command.remoteSpatialHeight) {
			addErrorNode("terminalOutOfBounds", commandNode, parametersNode);	
			return;
		}
		
		if (!Inclusive2DIntersectionVerifier.intersects(terminal.localPoint2D(), 
				new Rectangle2D.Float(spatialOrigin.x, spatialOrigin.y, 
						spatialWidth, spatialHeight))) {
			throw new AddOutOfBoundsThrowable();
		}
		
		if (duplicateName) {
			throw new DuplicateNameThrowable();
		}
		
		if (duplicateCoordinate) {
			throw new DuplicateCoordinateThrowable();
		}
		
		if (terminalConnectingCity == null) {
			throw new CityDoesNotExistThrowable();
		}
		
		if (terminalConnectingCity.getRemoteX() != terminal.getRemoteX() || terminalConnectingCity.getRemoteY() != terminal.getRemoteY()) {
			throw new NotSameMetropoleThrowable();
		}
		
		for (Road r : allRoads) {
			if (Inclusive2DIntersectionVerifier.intersects(airport.localPoint2D(), 
					r.toLine2D())) {
				throw new PMRuleViolationThrowable();
			}
		}
		/*if (Inclusive2DIntersectionVerifier.intersects(airport.localPoint2D(), 
				terminal.toLine2D())) {
			throw new PMRuleViolationThrowable();
		}*/

		numAirports++;	
		numRoadsForCity.put(airport.getName(), 0);
		
		needToThrowPMRuleException = false;
		root = root.add(airport, spatialOrigin, spatialWidth, spatialHeight);
		
		if (needToThrowPMRuleException) {
			throw new PMRuleViolationThrowable();
		}
		
	}
	
	public void addTerminal(final Terminal terminal, City terminalConnectingCity) 
			throws PMRuleViolationThrowable,
			CityNotMappedThrowable, RoadIntersectingThrowable {
		
		//Not mapped error
		if (!Command.remoteSpatialMap.contains(terminalConnectingCity.getName())) {
			throw new CityNotMappedThrowable();
		}

		Road terminalRoad = new Road(terminal);
		if (intersectingErrorTerminal(terminalRoad)) {
			throw new RoadIntersectingThrowable();
		}
		
		allRoads.add(terminalRoad);
		Rectangle2D.Float world = new Rectangle2D.Float(spatialOrigin.x, spatialOrigin.y, 
				spatialWidth, spatialHeight);

		if (Inclusive2DIntersectionVerifier.intersects(terminal.localPoint2D(), world)) {
			increaseNumRoadsMap(terminal.getTerminalName());
		}
		
		City nonNullCity = terminalRoad.getStart() != null ? terminalRoad.getStart() : terminalRoad.getEnd();
		if (Inclusive2DIntersectionVerifier.intersects(nonNullCity.toPoint2D(), world)) {
			increaseNumRoadsMap(nonNullCity.getName());
		}
		
		//root = root.add(terminal, spatialOrigin, spatialWidth, spatialHeight);		
		needToThrowPMRuleException = false;
		root = root.add(terminalRoad, spatialOrigin, spatialWidth, spatialHeight);
		
		if (needToThrowPMRuleException) {
			throw new PMRuleViolationThrowable();
		}

	}
	
	
	public void addTerminal(final Terminal terminal, Airport airport, City terminalConnectingCity) 
			throws OutOfBoundsThrowable, PMRuleViolationThrowable, AirportDoesNotExistThrowable,
			CityDoesNotExistThrowable, AirportNotSameMetropoleThrowable, NotSameMetropoleThrowable,
			CityNotMappedThrowable, RoadIntersectingThrowable {

		if (!Inclusive2DIntersectionVerifier.intersects(terminal.localPoint2D(), 
				new Rectangle2D.Float(spatialOrigin.x, spatialOrigin.y, 
						spatialWidth, spatialHeight))) {
			throw new OutOfBoundsThrowable();
		}
		
		if (airport == null) {
			throw new AirportDoesNotExistThrowable();
		}
		
		if (terminalConnectingCity == null) {
			throw new CityDoesNotExistThrowable();
		}
		
		if (airport.getRemoteX() != terminal.getRemoteX() || airport.getRemoteY() != terminal.getRemoteY()) {
			throw new AirportNotSameMetropoleThrowable();
		}
		
		if (terminalConnectingCity.getRemoteX() != terminal.getRemoteX() || terminalConnectingCity.getRemoteY() != terminal.getRemoteY()) {
			throw new NotSameMetropoleThrowable();
		}

		//Not mapped error
		if (!Command.remoteSpatialMap.contains(terminalConnectingCity.getName())) {
			throw new CityNotMappedThrowable();
		}

		Road r = new Road(terminal);
		if (intersectingErrorTerminal(r)) {
			throw new RoadIntersectingThrowable();
		}
		
		allRoads.add(r);
		Rectangle2D.Float world = new Rectangle2D.Float(spatialOrigin.x, spatialOrigin.y, 
				spatialWidth, spatialHeight);

		if (Inclusive2DIntersectionVerifier.intersects(terminal.localPoint2D(), world)) {
			increaseNumRoadsMap(terminal.getTerminalName());
		}
		
		City nonNullCity = r.getStart() != null ? r.getStart() : r.getEnd();
		if (Inclusive2DIntersectionVerifier.intersects(nonNullCity.toPoint2D(), world)) {
			increaseNumRoadsMap(nonNullCity.getName());
		}
		
		//root = root.add(terminal, spatialOrigin, spatialWidth, spatialHeight);		
		needToThrowPMRuleException = false;
		root = root.add(r, spatialOrigin, spatialWidth, spatialHeight);
		
		if (needToThrowPMRuleException) {
			throw new PMRuleViolationThrowable();
		}
	}
	
	private boolean intersectingErrorTerminal(Road terminalRoad) {
		
		for (Road r : allRoads) {
			if (Inclusive2DIntersectionVerifier.intersects(terminalRoad.toLine2D(), r.toLine2D())) {
				int numOfAllowedIntersections = 0;
				
				//R start to All
				if (r.getStart() != null && terminalRoad.getStartTerminal() != null && 
						r.getStart().getName().equals(terminalRoad.getStartTerminal().getTerminalName())) numOfAllowedIntersections++;
				if (r.getStart() != null && terminalRoad.getEnd() != null && 
						r.getStart().equals(terminalRoad.getEnd())) numOfAllowedIntersections++;
				if (r.getStart() != null && terminalRoad.getEndTerminal() != null && 
						r.getStart().getName().equals(terminalRoad.getEndTerminal().getTerminalName())) numOfAllowedIntersections++;
				if (r.getStart() != null && terminalRoad.getStart() != null && 
						r.getStart().equals(terminalRoad.getStart())) numOfAllowedIntersections++;
				//R end to all
				if (r.getEnd() != null && terminalRoad.getStartTerminal() != null && 
						r.getEnd().getName().equals(terminalRoad.getStartTerminal().getTerminalName())) numOfAllowedIntersections++;
				if (r.getEnd() != null && terminalRoad.getEnd() != null && 
						r.getEnd().equals(terminalRoad.getEnd())) numOfAllowedIntersections++;
				if (r.getEnd() != null && terminalRoad.getEndTerminal() != null && 
						r.getEnd().getName().equals(terminalRoad.getEndTerminal().getTerminalName())) numOfAllowedIntersections++;
				if (r.getEnd() != null && terminalRoad.getStart() != null && 
						r.getEnd().equals(terminalRoad.getStart())) numOfAllowedIntersections++;
				//R startTerminal to all
				if (r.getStartTerminal() != null && terminalRoad.getStartTerminal() != null && 
						r.getStartTerminal().getTerminalName().equals(terminalRoad.getStartTerminal().getTerminalName())) numOfAllowedIntersections++;
				if (r.getStartTerminal() != null && terminalRoad.getEnd() != null && 
						r.getStartTerminal().getTerminalName().equals(terminalRoad.getEnd().getName())) numOfAllowedIntersections++;
				if (r.getStartTerminal() != null && terminalRoad.getEndTerminal() != null && 
						r.getStartTerminal().getTerminalName().equals(terminalRoad.getEndTerminal().getTerminalName())) numOfAllowedIntersections++;
				if (r.getStartTerminal() != null && terminalRoad.getStart() != null && 
						r.getStartTerminal().getTerminalName().equals(terminalRoad.getStart().getName())) numOfAllowedIntersections++;
				//R endTerminal to all
				if (r.getEndTerminal() != null && terminalRoad.getStartTerminal() != null && 
						r.getEndTerminal().getTerminalName().equals(terminalRoad.getStartTerminal().getTerminalName())) numOfAllowedIntersections++;
				if (r.getEndTerminal() != null && terminalRoad.getEnd() != null && 
						r.getEndTerminal().getTerminalName().equals(terminalRoad.getEnd().getName())) numOfAllowedIntersections++;
				if (r.getEndTerminal() != null && terminalRoad.getEndTerminal() != null && 
						r.getEndTerminal().getTerminalName().equals(terminalRoad.getEndTerminal().getTerminalName())) numOfAllowedIntersections++;
				if (r.getEndTerminal() != null && terminalRoad.getStart() != null && 
						r.getEndTerminal().getTerminalName().equals(terminalRoad.getStart().getName())) numOfAllowedIntersections++;
				
				if (numOfAllowedIntersections != 1) return true;
			}
			//Else, safe for this iteration. Check next one to see if need to throw an error
		}
		
		return false;
	}
	
	public void addIsolatedCity(final City c) 
			throws IsolatedCityAlreadyExistsThrowable, RoadAlreadyExistsThrowable, OutOfBoundsThrowable, PMRuleViolationThrowable {
		if (numRoadsForCity.get(c.getName()) != null) {
			if (numRoadsForCity.get(c.getName()) > 0) {
				throw new RoadAlreadyExistsThrowable();
			} else {
				throw new IsolatedCityAlreadyExistsThrowable();
			}
		}
		
		if (!Inclusive2DIntersectionVerifier.intersects(c.toPoint2D(), 
				new Rectangle2D.Float(spatialOrigin.x, spatialOrigin.y, 
						spatialWidth, spatialHeight))) {
			throw new OutOfBoundsThrowable();
		}

		numIsolatedCities++;
		numRoadsForCity.put(c.getName(), 0);		

		root = root.add(c, spatialOrigin, spatialWidth, spatialHeight);		
	}

	private void increaseNumRoadsMap(final String name) {
		Integer numRoads = numRoadsForCity.get(name);
		if (numRoads != null) {
			numRoads++;
			numRoadsForCity.put(name, numRoads);
		} else {
			numRoadsForCity.put(name, 1);
		}
	}
	
	private void decreaseNumRoadsMap(final String name) {
		Integer numRoads = numRoadsForCity.get(name);
		if (numRoads != null) {
			numRoads--;
			numRoadsForCity.replace(name, numRoads);
			if (numRoads == 0) {
				numRoadsForCity.remove(name);
			}
		}
	}

	public void clear() {
		root = white;
		allRoads.clear();
		numRoadsForCity.clear();
		numIsolatedCities = 0;
	}

	public boolean isEmpty() {
		return (root == white);
	}

	public boolean containsCity(final String name) {
		final Integer numRoads = numRoadsForCity.get(name);
		return (numRoads != null);
	}
	
	public boolean containsRoad(final Road road) {
		return allRoads.contains(road);
	}

	public int getOrder() {
		return order;
	}
	
	public int getNumCities() {
		return numRoadsForCity.keySet().size();
	}

	public int getNumIsolatedCities() {
		return numIsolatedCities;
	}
	
	public int getNumRoads() {
		return allRoads.size();
	}
	
	public boolean isIsolatedCity(Geometry g) {
		if (!g.isCity()) {
			return false;
		}
		City c = (City)g;
		Integer n = numRoadsForCity.get(c.getName());
		if (n == null || n > 0) {
			return false;
		}
		return true;
	}

	public void deleteGeometry(Road road) throws StartDoesNotExistThrowable, EndDoesNotExistThrowable {
		//TODO: Make the road throw an error when encountering a terminalCity
		if (road.getStartTerminal() != null) {
			throw new StartDoesNotExistThrowable();
		} else if (road.getEndTerminal() != null) {
			throw new EndDoesNotExistThrowable();
		}
		
		root = root.remove(road, spatialOrigin, spatialWidth, spatialHeight);
		
		boolean cannotRemoveStart = false, cannotRemoveEnd = false;
		
		for (Road existingRoad : allRoads) {
			if (!existingRoad.equals(road)) {
				if (existingRoad.getStart() != null) {
					if (road.getStart().equals(existingRoad.getStart()) || 
							road.getStart().equals(existingRoad.getEnd())) {
						cannotRemoveStart = true;
					}
				}
				
				if (existingRoad.getEnd() != null) {
					if (road.getEnd().equals(existingRoad.getEnd())
							|| road.getEnd().equals(existingRoad.getStart())) {
						cannotRemoveEnd = true;
					}
				}
			}
		}
		
		if (!cannotRemoveStart) {
			root = root.remove(road.getStart(), spatialOrigin, spatialWidth, spatialHeight);
			decreaseNumRoadsMap(road.getStart().getName());
		}
		
		if (!cannotRemoveEnd) {
			root = root.remove(road.getEnd(), spatialOrigin, spatialWidth, spatialHeight);
			if (cannotRemoveStart) 	
				decreaseNumRoadsMap(road.getEnd().getName());
		}

	}

	public void deleteGeometry(Airport airport) {
		root = root.remove(airport, spatialOrigin, spatialWidth, spatialHeight);
	}

	public void deleteGeometry(Terminal terminal, boolean roadOnly) {
		if (roadOnly) {
			root = root.remove(new Road(terminal), spatialOrigin, spatialWidth, spatialHeight);
		} else {
			root = root.remove(terminal, spatialOrigin, spatialWidth, spatialHeight);
			root = root.remove(new Road(terminal), spatialOrigin, spatialWidth, spatialHeight);
		}
	}

	public void deleteGeometry(City city) {
		root = root.remove(city, spatialOrigin, spatialWidth, spatialHeight);
	}
}
