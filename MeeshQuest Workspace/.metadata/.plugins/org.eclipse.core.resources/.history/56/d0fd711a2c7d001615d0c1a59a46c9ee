package cmsc420.meeshquest.utilities;

import java.awt.geom.Point2D;
import java.awt.geom.Point2D.Float;
import java.util.Comparator;
import java.util.Map;
import java.util.TreeMap;

import org.w3c.dom.Element;

import cmsc420.meeshquest.citymapobjects.City;
import cmsc420.meeshquest.datastructures.AVLTree;
import cmsc420.meeshquest.datastructures.MXQuadtree;

public class MethodMediator {

	//DataStructures
	private Map<String, City> nameToCity = new TreeMap<String, City>(
			new Comparator<String>() {

				@Override
				public int compare(String name1, String name2) {
					return name2.compareTo(name1);
				}
				
			}
	);
	
	/**
	 * TODO: Make sure this implementation is correct.
	 */
	private TreeMap<Point2D.Float, City> coordinatesToCity = new TreeMap<Point2D.Float, City>(
			new Comparator<Point2D.Float>() {

				@Override
				public int compare(Float point1, Float point2) {
					int compareVal = 0;
					if (point1.getY() < point2.getY()) {
						compareVal = -1;
					} else if (point1.getY() > point2.getY()) {
						compareVal = 1;
					} else {
						if (point1.getX() < point2.getX()) {
							compareVal = -1;
						} else if (point1.getX() > point2.getX()) {
							compareVal = 1;
						} else {
							compareVal = 0;
						}
					}
					return compareVal;
				}
				
			}
	);
	
	private AVLTree avlTree = new AVLTree();
	private MXQuadtree mxQuadTree = new MXQuadtree();
	
	//TODO: When successfully made a command, add a results node if there isn't one
	//in the docs already. Else, add a failNode
	//TODO: Make this function create xml elements when needed
	private void CreateXmlElement() {
		//results.createElement("")
	}
	
	private void CreateCityErrorOutput(String errorType, String name, int x, int y, int radius, String color) {
		Element errorElement = XmlParser.results.createElement("error");
		errorElement.setAttribute("type", errorType);
		XmlParser.currElement.appendChild(errorElement);
		
		Element commandElement = XmlParser.results.createElement("command");
		commandElement.setAttribute("name", "createCity");
		errorElement.appendChild(commandElement);
		
		Element parametersElement = XmlParser.results.createElement("parameters");
		errorElement.appendChild(parametersElement);
		
		Element nameElement = XmlParser.results.createElement("name");
		nameElement.setAttribute("value", name);
		parametersElement.appendChild(nameElement);
		
		Element xCoordElement = XmlParser.results.createElement("x");
		xCoordElement.setAttribute("value", Integer.toString(x));
		parametersElement.appendChild(xCoordElement);
		
		Element yCoordElement = XmlParser.results.createElement("y");
		yCoordElement.setAttribute("value", Integer.toString(y));
		parametersElement.appendChild(yCoordElement);
		
		Element radiusElement = XmlParser.results.createElement("radius");
		radiusElement.setAttribute("value", Integer.toString(radius));
		parametersElement.appendChild(radiusElement);
		
		Element colorElement = XmlParser.results.createElement("color");
		colorElement.setAttribute("value", color);
		parametersElement.appendChild(colorElement);
	}
	
	/**
	 * Creates a city based on the parameters, which are given by the 
	 * @param name
	 * @param x
	 * @param y
	 * @param radius
	 * @param color
	 */
	public void CreateCity(String name, int x, int y, int radius, String color) {
		City city = new City(name, x, y, radius, color);
		if (!nameToCity.containsKey(name)) {
			nameToCity.put(name, city);
		} else {
			CreateCityErrorOutput("duplicateCityName", name, x, y, radius, color);
			return;
		}
		
		if(!coordinatesToCity.containsKey(new Point2D.Float(x, y))) {
			coordinatesToCity.put(city.getCoordinates(), city);
		} else {
			CreateCityErrorOutput("duplicateCityCoordinates", name, x, y, radius, color);
			return;
		}
		
		avlTree.insert(city);
		
		Element successElement = XmlParser.results.createElement("success");
		XmlParser.currElement.appendChild(successElement);
		
		Element commandElement = XmlParser.results.createElement("command");
		commandElement.setAttribute("name", "createCity");
		successElement.appendChild(commandElement);
		
		Element parametersElement = XmlParser.results.createElement("parameters");
		successElement.appendChild(parametersElement);
		
		Element nameElement = XmlParser.results.createElement("name");
		nameElement.setAttribute("value", name);
		parametersElement.appendChild(nameElement);
		
		Element xCoordElement = XmlParser.results.createElement("x");
		xCoordElement.setAttribute("value", Integer.toString(x));
		parametersElement.appendChild(xCoordElement);
		
		Element yCoordElement = XmlParser.results.createElement("y");
		yCoordElement.setAttribute("value", Integer.toString(y));
		parametersElement.appendChild(yCoordElement);
		
		Element radiusElement = XmlParser.results.createElement("radius");
		radiusElement.setAttribute("value", Integer.toString(radius));
		parametersElement.appendChild(radiusElement);
		
		Element colorElement = XmlParser.results.createElement("color");
		colorElement.setAttribute("value", color);
		parametersElement.appendChild(colorElement);
		
		Element outputElement = XmlParser.results.createElement("output");
		successElement.appendChild(outputElement);
		
	}
	
	/**
	 * A method to sort all of the cities in order. One can specify
	 * how they would like to sort the elements.
	 * @param sortMethod
	 */
	public void ListCities(String sortMethod) {
		
		if (nameToCity.size() >= 1) {
		
			Element successElement = XmlParser.results.createElement("success");
			XmlParser.currElement.appendChild(successElement);
			
			Element commandElement = XmlParser.results.createElement("command");
			commandElement.setAttribute("name", "listCities");
			successElement.appendChild(commandElement);
			
			Element parametersElement = XmlParser.results.createElement("parameters");
			successElement.appendChild(parametersElement);
			
	
			Element sortByElement = XmlParser.results.createElement("sortBy");
			
			if (sortMethod.equals("name")) {
				sortByElement.setAttribute("value", "name");
				parametersElement.appendChild(sortByElement);
				
				Element outputElement = XmlParser.results.createElement("output");
				successElement.appendChild(outputElement);
				
				Element cityListElement = XmlParser.results.createElement("cityList");
				outputElement.appendChild(cityListElement);
	
				for (String entry : nameToCity.keySet()) { 
					City cityFromKey = nameToCity.get(entry);
	
					Element cityElement = XmlParser.results.createElement("city");
					cityElement.setAttribute("color", cityFromKey.getColor());
					cityElement.setAttribute("name", cityFromKey.getName());
					cityElement.setAttribute("radius", Integer.toString(cityFromKey.getRadius()));
					cityElement.setAttribute("x", Integer.toString((int)cityFromKey.getX()));
					cityElement.setAttribute("y", Integer.toString((int)cityFromKey.getY()));
					
					cityListElement.appendChild(cityElement);
				}
				
			} else if (sortMethod.equals("coordinate")) {
				sortByElement.setAttribute("value", "coordinate");
				parametersElement.appendChild(sortByElement);
				
				Element outputElement = XmlParser.results.createElement("output");
				successElement.appendChild(outputElement);
				
				Element cityListElement = XmlParser.results.createElement("cityList");
				outputElement.appendChild(cityListElement);
	
				for (Point2D.Float entry : coordinatesToCity.keySet()) { 
					City cityFromKey = coordinatesToCity.get(entry);
	
					Element cityElement = XmlParser.results.createElement("city");
					cityElement.setAttribute("color", cityFromKey.getColor());
					cityElement.setAttribute("name", cityFromKey.getName());
					cityElement.setAttribute("radius", Integer.toString(cityFromKey.getRadius()));
					cityElement.setAttribute("x", Integer.toString((int)cityFromKey.getX()));
					cityElement.setAttribute("y", Integer.toString((int)cityFromKey.getY()));
					
					cityListElement.appendChild(cityElement);
				}
			}
		} else {
			//TODO: Handle FATAL error here!
		}
	}
	
	private void DeleteCityError(String name) {
		Element errorElement = XmlParser.results.createElement("error");
		errorElement.setAttribute("type", "cityDoesNotExist");
		XmlParser.currElement.appendChild(errorElement);
		
		Element commandElement = XmlParser.results.createElement("command");
		commandElement.setAttribute("name", "deleteCity");
		errorElement.appendChild(commandElement);
		
		Element parametersElement = XmlParser.results.createElement("parameters");
		errorElement.appendChild(parametersElement);
		
		Element nameElement = XmlParser.results.createElement("name");
		nameElement.setAttribute("value", name);
		parametersElement.appendChild(nameElement);

	}
	
	public void DeleteCity(String name) {
		if (nameToCity.containsKey(name)) {
			
			//TODO: FIRST. If a city is mapped in MXQuadTree structure, remove it from the structure!
			//After that, remove from the dictionary
			
			Element successElement = XmlParser.results.createElement("success");
			XmlParser.currElement.appendChild(successElement);
			
			Element commandElement = XmlParser.results.createElement("command");
			commandElement.setAttribute("name", "printAvlTree");
			successElement.appendChild(commandElement);
			
			Element parametersElement = XmlParser.results.createElement("parameters");
			successElement.appendChild(parametersElement);

			Element outputElement = XmlParser.results.createElement("output");
			successElement.appendChild(outputElement);

			Element avlTreeElement = XmlParser.results.createElement("AvlGTree");
			outputElement.appendChild(avlTreeElement);
			avlTreeElement.setAttribute("cardinality", Integer.toString(avlTree.countNodes()));
			avlTreeElement.setAttribute("height", Integer.toString(avlTree.height()));
			//TODO: For Part One, maxImbalance is ALWAYS 1. For later parts, this won't be the case!
			avlTreeElement.setAttribute("maxImbalance", "1");
			
			avlTree.inorder(); //TODO: Access the XmlParser results in that area
		} else {
			DeleteCityError(name);
		}
		
	}

	private void AVLTreeError() {
		Element errorElement = XmlParser.results.createElement("error");
		errorElement.setAttribute("type", "emptyTree");
		XmlParser.currElement.appendChild(errorElement);
		
		Element commandElement = XmlParser.results.createElement("command");
		commandElement.setAttribute("name", "printAvlTree");
		errorElement.appendChild(commandElement);
		
		Element parametersElement = XmlParser.results.createElement("parameters");
		errorElement.appendChild(parametersElement);
	}
	
	public void PrintAVLTree() {
		if (!avlTree.isEmpty()) {
			
			Element successElement = XmlParser.results.createElement("success");
			XmlParser.currElement.appendChild(successElement);
			
			Element commandElement = XmlParser.results.createElement("command");
			commandElement.setAttribute("name", "printAvlTree");
			successElement.appendChild(commandElement);
			
			Element parametersElement = XmlParser.results.createElement("parameters");
			successElement.appendChild(parametersElement);

			Element outputElement = XmlParser.results.createElement("output");
			successElement.appendChild(outputElement);

			Element avlTreeElement = XmlParser.results.createElement("AvlGTree");
			outputElement.appendChild(avlTreeElement);
			avlTreeElement.setAttribute("cardinality", Integer.toString(avlTree.countNodes()));
			avlTreeElement.setAttribute("height", Integer.toString(avlTree.height()));
			//TODO: For Part One, maxImbalance is ALWAYS 1. For later parts, this won't be the case!
			avlTreeElement.setAttribute("maxImbalance", "1");
			
			avlTree.inorder(); //TODO: Access the XmlParser results in that area
		} else {
			AVLTreeError();
		}
		
	}

	/**
	 * Clears the MX QuadTree, Dictionary and AVLTree data structures.
	 * There are no error outputs for this method
	 */
	public void ClearAll() {
		nameToCity.clear();
		coordinatesToCity.clear();
		avlTree.makeEmpty();
		
		Element successElement = XmlParser.results.createElement("success");
		XmlParser.currElement.appendChild(successElement);
		
		Element commandElement = XmlParser.results.createElement("command");
		commandElement.setAttribute("name", "clearAll");
		successElement.appendChild(commandElement);
		
		Element parametersElement = XmlParser.results.createElement("parameters");
		successElement.appendChild(parametersElement);
		
		Element outputElement = XmlParser.results.createElement("output");
		successElement.appendChild(outputElement);
	}
	
}
