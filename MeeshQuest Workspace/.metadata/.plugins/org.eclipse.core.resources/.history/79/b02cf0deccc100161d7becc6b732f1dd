package cmsc420.geometry;

import java.awt.geom.Point2D;

public class Metropole {

	/** name of this city */
	protected String name;

	/** 2D coordinates of this city */
	protected Point2D.Float pt;

	/**
	 * Constructs a city.
	 * 
	 * @param name
	 *            name of the city
	 * @param remoteX
	 *            remoteX coordinate of the Metropole
	 * @param y
	 *            remoteY coordinate of the Metropole
	 */
	public Metropole(String name, int remoteX, int remoteY) {
		this.name = name;
		pt = new Point2D.Float(remoteX, remoteY);
	}

	/**
	 * Gets the name of this city.
	 * 
	 * @return name of this city
	 */
	public String getName() {
		return name;
	}

	/**
	 * Gets the X coordinate of this city.
	 * 
	 * @return X coordinate of this city
	 */
	public int getX() {
		return (int) pt.x;
	}

	/**
	 * Gets the Y coordinate of this city.
	 * 
	 * @return Y coordinate of this city
	 */
	public int getY() {
		return (int) pt.y;
	}

	/**
	 * Determines if this city is equal to another object. The result is true if
	 * and only if the object is not null and a City object that contains the
	 * same name, X and Y coordinates, radius, and color.
	 * 
	 * @param obj
	 *            the object to compare this city against
	 * @return <code>true</code> if cities are equal, <code>false</code>
	 *         otherwise
	 */
	public boolean equals(final Object obj) {
		if (obj == this)
			return true;
		if (obj != null && (obj.getClass().equals(this.getClass()))) {
			City c = (City) obj;
			return (name.equals(c.name) && pt.equals(c.localPt));
		}
		return false;
	}

	/**
	 * Returns a hash code for this city.
	 * 
	 * @return hash code for this city
	 */
	public int hashCode() {
		int hash = 12;
		hash = 37 * hash + name.hashCode();
		hash = 37 * hash + pt.hashCode();
		return hash;
	}

	/**
	 * Returns an (x,y) representation of the city. Important: casts the x and y
	 * coordinates to integers.
	 * 
	 * @return string representing the location of the city
	 */
	public String getLocationString() {
		final StringBuilder location = new StringBuilder();
		location.append("(");
		location.append(getX());
		location.append(",");
		location.append(getY());
		location.append(")");
		return location.toString();

	}

	/**
	 * Returns a Point2D instance representing the City's location.
	 * 
	 * @return location of this city
	 */
	public Point2D toPoint2D() {
		return new Point2D.Float(pt.x, pt.y);
	}
	
	public String toString() {
		return getLocationString();
	}


}
