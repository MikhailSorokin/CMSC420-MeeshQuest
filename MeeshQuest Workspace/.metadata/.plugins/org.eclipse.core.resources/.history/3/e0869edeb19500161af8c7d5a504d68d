package cmsc420.meeshquest.datastructures;

import java.awt.geom.Point2D;
import java.awt.geom.Point2D.Float;
import java.util.ArrayList;

import cmsc420.geom.Geometry2D;
import cmsc420.meeshquest.citymapobjects.City;
import cmsc420.meeshquest.citymapobjects.Line;
import cmsc420.meeshquest.citymapobjects.Point;


/**
 * Represents a leaf node of a PR Quadtree.
 */
public class BlackNode extends Node {

	protected City startVertex, endVertex;
	private int cardinality = 0;
	private ArrayList<Geometry2D> geometryList = new ArrayList<Geometry2D>();
	
	/**
	 * Constructs and initializes a leaf node.
	 */
	public BlackNode() {
		super(Node.LEAF);
	}

	public Node add(City newCity, Point2D.Float origin, int width,
			int height) {
		if (startVertex == null && GreyNode.numberNodes < 1) {
			/* node is empty, add city */
			startVertex = newCity;
			return this;
		} else {
			/* have not reached minimum partition, partition node and then add city */
			GreyNode internalNode = new GreyNode(origin, width,
					height);
			if (startVertex != null)
				internalNode.add(startVertex, origin, width, height);
			internalNode.add(newCity, origin, width, height);
			return internalNode;
		}
	}
	
	@Override
	public Node add(Geometry2D g, City newCity, Float origin, int width, int height) {
		if (!geometryList.contains(g)) {
			geometryList.add(g);
		}
		
		if (startVertex == null) {
			/* node is empty, add city */
			startVertex = newCity;
			endVertex = newCity;
			cardinality = 1;
			return this;
		} else { 
			/* If we have not partitioned enough, partition node and then add city. */
			GreyNode internalNode = new GreyNode(origin, width,
					height);
			for (Geometry2D gElement : geometryList) {
				internalNode.add(gElement, newCity, origin, width, height);
			}
			return internalNode;
		}
	}

	public Node remove(City city, Point2D.Float origin, int width,
			int height) {
		if (this.startVertex != city) {
			/* city not here */
			throw new IllegalArgumentException();
		} else {
			/* remove city, node becomes empty */
			this.startVertex = null;
			return WhiteNode.instance;
		}
	}
	
	public void addVertex(City cityData) {
		this.startVertex = cityData;
	}
	
	public City getStartVertex() {
		return startVertex;
	}
	
	public City getEndVertex() {
		return endVertex;
	}

	public void setCardinality(int cardinality) {
		this.cardinality  = cardinality;
	}
	
	public int getCardinality() {
		return cardinality;
	}
	
}
