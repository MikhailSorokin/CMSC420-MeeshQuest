package cmsc420.pmquadtree;

import cmsc420.geometry.Airport;
import cmsc420.geometry.City;
import cmsc420.geometry.Geometry;
import cmsc420.geometry.Road;
import cmsc420.geometry.Terminal;
import cmsc420.pmquadtree.PMQuadtree.Black;

public class PM1Validator implements Validator {

	//Node only valid when there is one city/airport/terminal in a quadrant (can have multiple roads), or
	//when there is ONLY one road.
	@Override
	public boolean valid(final Black node) {
		City nodeCity = null;
		Airport nodeAirport = null;
		Terminal nodeTerminal = null;
		
		for (Geometry g : node.getGeometry()) {
			if (g.isCity()) {
				nodeCity = (City)g;
			} else if (g.isAirport()) {
				nodeAirport = (Airport)g;
			} else if (g.isTerminal()) {
				nodeTerminal = (Terminal)g;
			}
		}
	
		if (node.getNumPoints() == 1) {
			for (Geometry g : node.getGeometry()) {
				if (g.isRoad()) {
					Road road = (Road)g;
					final String startName = road.getStart() != null ? road.getStart().getName() : road.getStartTerminal().getTerminalName();
					final String endName = road.getEnd() != null ? road.getEnd().getName() : road.getEndTerminal().getTerminalName();
					
					if (nodeCity != null) {
						if (road.getStart() != null && r.getStart().equals(g.getStart())) numOfAllowedIntersections++;
						if (road.getStart() != null && r.getStart().equals(g.getEnd())) numOfAllowedIntersections++;
						if (road.getEnd() != null && r.getEnd().equals(g.getStart())) numOfAllowedIntersections++;
						if (road.getEnd() != null && r.getEnd().equals(g.getEnd())) numOfAllowedIntersections++;
						if (road.getStartTerminal() != null && r.getStartTerminal().getTerminalName().equals(g.getStart().getName())) numOfAllowedIntersections++;
						if (road.getStartTerminal() != null && r.getStartTerminal().getTerminalName().equals(g.getEnd().getName())) numOfAllowedIntersections++;
						if (road.getEndTerminal() != null && r.getEndTerminal().getTerminalName().equals(g.getStart().getName())) numOfAllowedIntersections++;
						if (road.getEndTerminal() != null && r.getEndTerminal().getTerminalName().equals(g.getEnd().getName())) numOfAllowedIntersections++;
						
						if (!nodeCity.getName().equals(startName) && !nodeCity.getName().equals(endName)) {
							return false;
						}
					} else if (nodeAirport != null) {
						if (!nodeAirport.getName().equals(startName) && !nodeAirport.getName().equals(endName)) {
							return false;
						}
					} else if (nodeTerminal != null) {
						if (!nodeTerminal.getTerminalName().equals(startName) && !nodeTerminal.getTerminalName().equals(endName)) {
							return false;
						}
					}

				}
			}
			return true;
		} else if (node.getNumPoints() == 0) {
			int countRoads = 0;
			
			for (Geometry g : node.getGeometry()) {
				if (g.isRoad()) {
					countRoads++;
				}
			}
			
			return (countRoads > 1) ? false : true; 
		} else {
			return false;
		}
	}

}
